plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId package_name
        minSdkVersion 16
        targetSdkVersion 30
        versionCode Integer.parseInt(beeVersionCode)
        versionName "${beeVersionName}"
    }

    signingConfigs {
        config {
            keyAlias "${releaseKeyAlias}"
            keyPassword "${releaseKeyPassword}"
            storeFile file("../${releaseStoreFileName}")
            storePassword "${releaseStorePassword}"
        }
    }

    buildTypes {
        debug {
            resValue "string", "app_name", "${getAppName()}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    package_name : "${package_name}",
            ]
            signingConfig signingConfigs.config
        }

        release {
            resValue "string", "app_name", "${getAppName()}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    package_name : "${package_name}",
            ]
            signingConfig signingConfigs.config
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions.encoding = "UTF-8"

    applicationVariants.all { variant ->
        // 打包完成后复制到的目录
        def outputFileDir = "../../../outputApk/${variant.buildType.name}/${variant.flavorName}/"

        //确定输出文件名
        def today = new Date()
        def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ","")) + "_" +
                variant.buildType.name + "_"+
                variant.versionName + "_" +
                today.format('yyyyMMddhhmm') +
                ".apk"

        variant.outputs.all {
            outputFileName = path
        }

        print(outputFileDir.toString())
        println(path)

        //打包完成后做的一些事,复制apk到指定文件夹,复制mapping等
        variant.getAssembleProvider().get().doLast {
            File out = new File(outputFileDir)
            copy {
                from variant.mappingFileProvider
                into  out
                rename {
                    String fileName -> "${variant.buildType.name}-${variant.flavorName}-mapping-${variant.versionName}.txt"
                }
                variant.outputs.forEach{ file->
                    copy{
                        from file.outputFile
                        into out
                    }
                }
            }
        }
    }
}

def getAppName() {
    return new String(app_name.getBytes("iso8859-1"), "UTF-8")
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.0"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
}